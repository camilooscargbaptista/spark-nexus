#!/bin/bash

# ================================================
# Script de Configura√ß√£o Completa - HostGator Email
# Spark Nexus - Setup Final
# ================================================

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

echo -e "${CYAN}================================================${NC}"
echo -e "${CYAN}‚úâÔ∏è  Configura√ß√£o Final - Email HostGator${NC}"
echo -e "${CYAN}================================================${NC}"

# ================================================
# 1. VERIFICAR STATUS DOS DATABASES
# ================================================
echo -e "\n${BLUE}[1/5] Verificando Databases${NC}"
echo -e "${YELLOW}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"

echo -e "${GREEN}‚úÖ Databases j√° foram corrigidos com sucesso!${NC}"
echo "  ‚Ä¢ sparknexus_core ‚úÖ"
echo "  ‚Ä¢ sparknexus_tenants ‚úÖ"
echo "  ‚Ä¢ sparknexus_modules ‚úÖ"
echo "  ‚Ä¢ n8n ‚úÖ"

# ================================================
# 2. VERIFICAR CONFIGURA√á√ÉO DO EMAIL
# ================================================
echo -e "\n${BLUE}[2/5] Verificando Configura√ß√£o do Email${NC}"
echo -e "${YELLOW}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"

# Verificar se as vari√°veis foram configuradas
if grep -q "SMTP_HOST=mail.sparknexus.com.br" .env; then
    echo -e "${GREEN}‚úÖ Email HostGator configurado no .env${NC}"
    echo "  ‚Ä¢ Host: mail.sparknexus.com.br"
    echo "  ‚Ä¢ Port: 587"
    echo "  ‚Ä¢ User: contato@sparknexus.com.br"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Configurando email no .env...${NC}"
    
    # Adicionar configura√ß√µes se n√£o existirem
    cat >> .env << 'EOF'

# HostGator Email Configuration
SMTP_HOST=mail.sparknexus.com.br
SMTP_PORT=587
SMTP_SECURE=tls
SMTP_USER=contato@sparknexus.com.br
SMTP_PASS=Joao@26082310
SMTP_FROM=contato@sparknexus.com.br
EMAIL_FROM_NAME=Spark Nexus
EOF
    echo -e "${GREEN}‚úÖ Configura√ß√£o adicionada${NC}"
fi

# ================================================
# 3. CRIAR DIRET√ìRIOS E ARQUIVOS NECESS√ÅRIOS
# ================================================
echo -e "\n${BLUE}[3/5] Criando Estrutura de Arquivos${NC}"
echo -e "${YELLOW}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"

# Criar diret√≥rios se n√£o existirem
mkdir -p core/email-validator/services
mkdir -p modules/email-validator/services

echo -e "${YELLOW}üìÅ Criando arquivo de configura√ß√£o de email...${NC}"

# Criar arquivo de configura√ß√£o em m√∫ltiplos locais para garantir
for DIR in "core/email-validator/services" "modules/email-validator/services"; do
    if [ -d "$DIR" ]; then
        cat > "$DIR/emailConfig.js" << 'EOF'
// Configura√ß√£o do Email Service para HostGator
const nodemailer = require('nodemailer');

class EmailService {
    constructor() {
        // Configura√ß√£o espec√≠fica para HostGator
        this.transporter = nodemailer.createTransport({
            host: process.env.SMTP_HOST || 'mail.sparknexus.com.br',
            port: parseInt(process.env.SMTP_PORT || 587),
            secure: process.env.SMTP_PORT === '465', // true para 465, false para 587
            auth: {
                user: process.env.SMTP_USER || 'contato@sparknexus.com.br',
                pass: process.env.SMTP_PASS
            },
            tls: {
                rejectUnauthorized: false, // Necess√°rio para HostGator
                ciphers: 'SSLv3'
            },
            debug: true,
            logger: true
        });

        // Verificar conex√£o ao inicializar
        this.verifyConnection();
    }

    async verifyConnection() {
        try {
            await this.transporter.verify();
            console.log('‚úÖ Conex√£o com HostGator SMTP estabelecida');
            console.log(`   Server: ${process.env.SMTP_HOST}:${process.env.SMTP_PORT}`);
            console.log(`   User: ${process.env.SMTP_USER}`);
        } catch (error) {
            console.error('‚ùå Erro ao conectar com SMTP HostGator:', error.message);
            console.log('Verifique:');
            console.log('1. Email e senha est√£o corretos');
            console.log('2. Porta 587 (TLS) ou 465 (SSL)');
            console.log('3. Autentica√ß√£o SMTP habilitada no cPanel');
        }
    }

    async sendEmail(to, subject, html, text) {
        try {
            const mailOptions = {
                from: `"${process.env.EMAIL_FROM_NAME || 'Spark Nexus'}" <${process.env.SMTP_FROM || process.env.SMTP_USER}>`,
                to: to,
                subject: subject,
                html: html,
                text: text || html.replace(/<[^>]*>/g, '')
            };

            const info = await this.transporter.sendMail(mailOptions);
            console.log('‚úÖ Email enviado via HostGator:', info.messageId);
            return { success: true, messageId: info.messageId };
        } catch (error) {
            console.error('‚ùå Erro ao enviar email:', error);
            return { success: false, error: error.message };
        }
    }

    async sendTestEmail(to) {
        const subject = '‚úÖ Teste de Configura√ß√£o - Spark Nexus';
        const html = `
            <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 30px; border-radius: 10px 10px 0 0;">
                    <h1 style="color: white; margin: 0;">üéâ Configura√ß√£o Bem Sucedida!</h1>
                </div>
                
                <div style="padding: 30px; background: #f8f9fa;">
                    <h2 style="color: #333;">Email HostGator Configurado ‚úÖ</h2>
                    <p style="color: #666; line-height: 1.6;">
                        Este √© um email de teste enviado atrav√©s do servidor SMTP do HostGator.
                        Se voc√™ est√° recebendo este email, significa que a configura√ß√£o est√° funcionando perfeitamente!
                    </p>
                    
                    <div style="background: white; padding: 20px; border-radius: 8px; margin: 20px 0;">
                        <h3 style="color: #667eea;">Detalhes da Configura√ß√£o:</h3>
                        <ul style="color: #666;">
                            <li>Servidor: ${process.env.SMTP_HOST}</li>
                            <li>Porta: ${process.env.SMTP_PORT}</li>
                            <li>Usu√°rio: ${process.env.SMTP_USER}</li>
                            <li>Seguran√ßa: ${process.env.SMTP_PORT === '465' ? 'SSL' : 'TLS'}</li>
                        </ul>
                    </div>
                    
                    <p style="color: #666;">
                        Agora voc√™ pode usar o sistema Spark Nexus para validar e enviar emails!
                    </p>
                </div>
                
                <div style="background: #333; padding: 20px; text-align: center; border-radius: 0 0 10px 10px;">
                    <p style="color: #999; margin: 0; font-size: 12px;">
                        Spark Nexus - Sistema de Valida√ß√£o de Emails<br>
                        ¬© 2024 - Todos os direitos reservados
                    </p>
                </div>
            </div>
        `;
        
        return await this.sendEmail(to, subject, html);
    }
}

module.exports = EmailService;
EOF
        echo -e "${GREEN}‚úÖ Arquivo criado em $DIR${NC}"
    fi
done

# ================================================
# 4. REINICIAR SERVI√áOS
# ================================================
echo -e "\n${BLUE}[4/5] Reiniciando Servi√ßos${NC}"
echo -e "${YELLOW}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"

echo -e "${YELLOW}üîÑ Reiniciando containers...${NC}"
docker-compose restart email-validator 2>/dev/null || echo "  ‚ö†Ô∏è email-validator n√£o est√° rodando"
docker-compose restart client-dashboard 2>/dev/null || echo "  ‚ö†Ô∏è client-dashboard n√£o est√° rodando"

echo -e "${YELLOW}‚è≥ Aguardando servi√ßos iniciarem (15 segundos)...${NC}"
sleep 15

# ================================================
# 5. TESTAR CONFIGURA√á√ÉO
# ================================================
echo -e "\n${BLUE}[5/5] Testando Configura√ß√£o${NC}"
echo -e "${YELLOW}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"

# Criar script de teste local
cat > test-hostgator-email.js << 'EOF'
// Script de Teste - HostGator Email
require('dotenv').config();
const nodemailer = require('nodemailer');

console.log('üß™ Testando configura√ß√£o HostGator...\n');
console.log('Configura√ß√£o:');
console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
console.log(`Host: ${process.env.SMTP_HOST}`);
console.log(`Port: ${process.env.SMTP_PORT}`);
console.log(`User: ${process.env.SMTP_USER}`);
console.log(`From: ${process.env.SMTP_FROM}`);
console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');

async function testEmail() {
    const transporter = nodemailer.createTransport({
        host: process.env.SMTP_HOST || 'mail.sparknexus.com.br',
        port: parseInt(process.env.SMTP_PORT || 587),
        secure: process.env.SMTP_PORT === '465',
        auth: {
            user: process.env.SMTP_USER || 'contato@sparknexus.com.br',
            pass: process.env.SMTP_PASS
        },
        tls: {
            rejectUnauthorized: false,
            ciphers: 'SSLv3'
        }
    });

    try {
        console.log('üì° Verificando conex√£o...');
        await transporter.verify();
        console.log('‚úÖ Conex√£o estabelecida!\n');
        
        console.log('üìß Enviando email de teste...');
        const info = await transporter.sendMail({
            from: `"Spark Nexus" <${process.env.SMTP_FROM || process.env.SMTP_USER}>`,
            to: process.env.SMTP_USER,
            subject: '‚úÖ Teste HostGator - Spark Nexus',
            html: '<h2>Email de teste enviado com sucesso!</h2><p>HostGator SMTP funcionando.</p>'
        });
        
        console.log('‚úÖ Email enviado!');
        console.log('Message ID:', info.messageId);
        console.log('\nüéâ Configura√ß√£o funcionando perfeitamente!');
        
    } catch (error) {
        console.error('\n‚ùå Erro:', error.message);
        console.log('\nüîß Solu√ß√µes:');
        console.log('1. Verifique email e senha');
        console.log('2. No cPanel, verifique se SMTP est√° habilitado');
        console.log('3. Tente porta 465 ao inv√©s de 587');
        console.log('4. Verifique firewall/antivirus local');
    }
}

testEmail();
EOF

# Verificar se npm est√° dispon√≠vel localmente
if command -v npm &> /dev/null; then
    echo -e "${YELLOW}üìß Instalando depend√™ncias para teste local...${NC}"
    npm install nodemailer dotenv 2>/dev/null || true
    
    echo -e "${YELLOW}üß™ Executando teste de email...${NC}"
    node test-hostgator-email.js || echo -e "${YELLOW}‚ö†Ô∏è Teste local falhou, verifique as depend√™ncias${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è npm n√£o encontrado localmente, teste ser√° feito via Docker${NC}"
fi

# Teste via curl na API
echo -e "\n${YELLOW}üîç Testando API de email...${NC}"
curl -X POST http://localhost:4201/api/test-email \
    -H "Content-Type: application/json" \
    -d '{"email":"contato@sparknexus.com.br"}' 2>/dev/null || echo -e "${YELLOW}‚ö†Ô∏è API ainda n√£o est√° pronta${NC}"

# ================================================
# RESULTADO FINAL
# ================================================
echo ""
echo -e "${GREEN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
echo -e "${GREEN}‚úÖ CONFIGURA√á√ÉO COMPLETA!${NC}"
echo -e "${GREEN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
echo ""

# Verificar status dos containers
echo -e "${CYAN}üìä Status dos Servi√ßos:${NC}"
docker ps --format "table {{.Names}}\t{{.Status}}" | grep sparknexus || echo "Verificando..."

echo ""
echo -e "${CYAN}üìß Configura√ß√£o HostGator:${NC}"
echo "  ‚Ä¢ Host: mail.sparknexus.com.br"
echo "  ‚Ä¢ Port: 587 (TLS)"
echo "  ‚Ä¢ User: contato@sparknexus.com.br"
echo "  ‚Ä¢ Status: Configurado ‚úÖ"

echo ""
echo -e "${CYAN}üîç Comandos √öteis:${NC}"
echo -e "${YELLOW}# Ver logs do email service:${NC}"
echo "docker-compose logs -f email-validator"
echo ""
echo -e "${YELLOW}# Testar envio de email:${NC}"
echo "node test-hostgator-email.js"
echo ""
echo -e "${YELLOW}# Verificar containers:${NC}"
echo "docker ps | grep sparknexus"
echo ""
echo -e "${YELLOW}# Acessar o sistema:${NC}"
echo "open http://localhost:4201/upload"

echo ""
echo -e "${BLUE}üí° Pr√≥ximos Passos:${NC}"
echo "1. Acesse: http://localhost:4201/upload"
echo "2. Fa√ßa upload de uma lista de emails"
echo "3. Voc√™ receber√° o relat√≥rio em contato@sparknexus.com.br"

echo ""
echo -e "${YELLOW}‚ö†Ô∏è  Limites do HostGator:${NC}"
echo "‚Ä¢ Planos compartilhados: 500 emails/hora"
echo "‚Ä¢ Se exceder, aguarde 1 hora"
echo "‚Ä¢ Para mais envios, considere um plano dedicado"

echo ""
echo -e "${GREEN}üöÄ Sistema Spark Nexus com HostGator configurado e pronto!${NC}"